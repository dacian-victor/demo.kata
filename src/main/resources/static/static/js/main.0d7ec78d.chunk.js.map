{"version":3,"sources":["services/UserService.js","components/Home.js","components/Find.js","components/Update.js","components/Create.js","components/Delete.js","components/Error.js","components/Navigation.js","App.js","serviceWorker.js","index.js"],"names":["USERS_REST_API_URL","fetch","method","headers","then","response","json","id","data","body","JSON","stringify","Home","props","state","users","UserService","getUsers","setState","this","map","user","name","address","React","Component","Find","clickHandler","bind","document","getElementById","value","getUser","type","onClick","Update","updateUser","size","handleClick","Create","createUser","Delete","deleteUser","catch","e","console","log","Error","Navigation","className","to","App","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.0d7ec78d.chunk.js","sourcesContent":["\r\nconst USERS_REST_API_URL = 'http://192.168.1.106:8080/webapp-0.1/persons';\r\n\r\nclass UserService {\r\n\r\n    getUsers(){\r\n        return fetch(USERS_REST_API_URL, {\r\n            method: 'GET',\r\n            headers: { 'Content-Type': 'application/json' }\r\n      }).then(response => response.json());      \r\n    }\r\n\r\n    getUser(id) {\r\n        return fetch(USERS_REST_API_URL + \"/\" + id, {\r\n            method: 'GET',\r\n            headers: { 'Content-Type': 'application/json' }\r\n      }).then(response => response.json());      \r\n    }\r\n    \r\n    createUser(data) {\r\n        fetch(USERS_REST_API_URL, {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(data)\r\n      });\r\n    }\r\n \r\n    updateUser(id, data) {\r\n        fetch(USERS_REST_API_URL + \"/\" + id, {\r\n            method: 'PUT',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(data)\r\n      });\r\n    }   \r\n    \r\n    deleteUser(id) {\r\n        return fetch(USERS_REST_API_URL + \"/\" + id, {\r\n            method: 'DELETE',\r\n            headers: { 'Content-Type': 'application/json' }\r\n      });      \r\n    }   \r\n    \r\n}\r\n\r\nexport default new UserService();","import React from 'react';\r\nimport UserService from '../services/UserService';\r\n\r\nclass Home extends React.Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            users:[]\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        UserService.getUsers().then((response) => {\r\n            this.setState({ users: response})\r\n        });\r\n    }\r\n    render() {\r\n        return (\r\n        <div>\r\n            <h1>List Persons</h1>\r\n            <p>Home page body content</p> \r\n            {\r\n                this.state.users.map((user) => \r\n                    <div>\r\n                        <p> {user.id} | {user.name} | {user.address}</p>   \r\n                    </div>\r\n                )\r\n            }           \r\n        </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default Home;","import React from 'react';\r\nimport UserService from '../services/UserService';\r\n\r\nclass Find extends React.Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            users:[]\r\n        }\r\n        this.clickHandler = this.clickHandler.bind(this);\r\n    }\r\n    clickHandler() {\r\n        var id = document.getElementById(\"id\").value;\r\n        UserService.getUser(id).then((response) => {\r\n            this.setState({ users: [response]});\r\n        });\r\n    }\r\n    render() {\r\n        return (\r\n        <div>\r\n            <h1>Find Person</h1>\r\n            Insert id to get: <input type=\"text\" id=\"id\"/> \r\n            <button onClick={this.clickHandler}>Add to db</button>            \r\n            {\r\n                this.state.users.map(\r\n                    (user) => \r\n                        <div>\r\n                                <p> {user.id} | {user.name} | {user.address}</p>   \r\n                        </div>\r\n                )\r\n            }           \r\n        </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default Find;","import React from 'react';\r\nimport UserService from '../services/UserService';\r\n \r\nclass Update extends React.Component {\r\n   handleClick() {\r\n      var id = document.getElementById(\"id\").value;\r\n      UserService.updateUser(id, {\r\n         \"name\": document.getElementById(\"name\").value, \r\n         \"address\": document.getElementById(\"address\").value \r\n      });\r\n   }\r\n   render() {\r\n      return (\r\n         <div>\r\n            <h1>Update Person</h1>\r\n            <p>About US page body content</p>\r\n            <input type=\"text\" id=\"id\" size=\"4\"/>\r\n            <input type=\"text\" id=\"name\" />\r\n            <input type=\"text\" id=\"address\"  />\r\n            <button onClick={this.handleClick}>Add to db</button>\r\n         </div>\r\n      );\r\n   }\r\n}\r\n \r\nexport default Update;","import React from 'react';\r\nimport UserService from '../services/UserService';\r\n \r\nclass Create extends React.Component {\r\n   handleClick() {\r\n      UserService.createUser({\r\n         \"name\": document.getElementById(\"name\").value, \r\n         \"address\": document.getElementById(\"address\").value \r\n      });\r\n   }\r\n   render() {\r\n      return (\r\n         <div>\r\n            <h1>Create Person</h1>\r\n            <p>About US page body content</p>\r\n            <input type=\"text\" id=\"name\" />\r\n            <input type=\"text\" id=\"address\" />\r\n            <button onClick={this.handleClick}>Add to db</button>\r\n         </div>\r\n      );\r\n   }\r\n}\r\n \r\nexport default Create;","import React from 'react';\r\nimport UserService from '../services/UserService';\r\n\r\nclass Delete extends React.Component {\r\n   clickHandler() {\r\n      var id = document.getElementById(\"id\").value;\r\n      UserService.deleteUser(id).catch(e => {\r\n         console.log(e);\r\n      });  \r\n  }\r\n   render() {\r\n      return (\r\n         <div>\r\n            <h1>Delete Person</h1>\r\n            Insert id to delete: <input type=\"text\" id=\"id\"/> \r\n            <button onClick={this.clickHandler}>Delete from db</button>     \r\n         </div>\r\n      );\r\n   }\r\n}\r\n \r\nexport default Delete;","import React from 'react';\r\n \r\nconst Error = () => {\r\n    return (\r\n       <div>\r\n          <p>Error: Page does not exist!</p>\r\n       </div>\r\n    );\r\n}\r\n \r\nexport default Error;","import React from 'react';\r\n \r\nimport { NavLink } from 'react-router-dom';\r\n \r\nconst Navigation = () => {\r\n    return (\r\n       <div>\r\n          <NavLink className=\"main-nav\" to=\"/\">Home</NavLink>\r\n          <NavLink className=\"main-nav\" to=\"/find\">Find</NavLink>\r\n          <NavLink className=\"main-nav\" to=\"/create\">Create</NavLink>\r\n          <NavLink className=\"main-nav\" to=\"/update\">Update</NavLink>\r\n          <NavLink className=\"main-nav\" to=\"/delete\">Delete</NavLink>\r\n       </div>\r\n    );\r\n}\r\n \r\nexport default Navigation;","import React, { Component } from 'react';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\n \nimport Home from './components/Home';\nimport Find from './components/Find';\nimport Update from './components/Update';\nimport Create from './components/Create';\nimport Delete from './components/Delete';\nimport Error from './components/Error';\nimport Navigation from './components/Navigation';\n \nclass App extends Component {\n  render() {\n    return (      \n       <HashRouter>\n        <div>\n          <Navigation />\n            <Switch>\n             <Route path=\"/\" component={Home} exact/>\n             <Route path=\"/find\" component={Find}/>\n             <Route path=\"/create\" component={Create}/>\n             <Route path=\"/update\" component={Update}/>\n             <Route path=\"/delete\" component={Delete}/>\n            <Route component={Error}/>\n           </Switch>\n        </div> \n      </HashRouter>\n    );\n  }\n}\n \nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}